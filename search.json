[{"path":"/articles/cross-validation.html","id":"continuous-outcome-demo-presidential-forecasts","dir":"Articles","previous_headings":"","what":"Continuous outcome demo: presidential forecasts","title":"EBMA cross-validation","text":"canonical EBMAforecast package includes two demo data sets used illustrate performance EBMA. first demo example consists forecasts vote share US presidential elections. data consist 6 different predictions incumbent party vote share 15 US presidential elections, along actual vote share. original application (Montgomery, Hollenbach, Ward 2015) uses 1 case --sample test, 2012 election. like get robust estimate --sample performance, going use cross-validation 3 15 cases left testing split. avoid random element splits assigned, going 455 distinct1 calibration/test splits, run . assess performance, look calibration test period MAE RMSE component models, EBMA, baseline simple average ensemble. Relevant questions: EBMA perform better component models? EBMA perform better simple average? Overfitting: much performance decline calibration test? results, ordered best test RMSE worse test RMSE. EBMA better input models MAE RMSE calibration test sets. compare EBMA calibration test MAEs, RMSE, can see cases test error larger, 0.2, calibration period. overfitting work. comparison, simple average errors comparable calibration test sets. result, simple average outperforms EBMA ensemble cross-validated --sample test sets, MAE RMSE.","code":"data(presidentialForecast)  dplyr::glimpse(presidentialForecast) #> Rows: 15 #> Columns: 7 #> $ Campbell     <dbl> 46.83648, 54.04117, 51.15267, 61.12062, 48.45415, 61.1735… #> $ `Lewis-Beck` <dbl> 45.18571, 56.77496, 48.44678, 63.17691, 48.65492, 59.5803… #> $ EWT2C2       <dbl> 45.70344, 56.54709, 49.61112, 63.48235, 51.81968, 55.0477… #> $ Fair         <dbl> 45.24491, 56.41898, 51.08189, 61.20933, 50.19200, 58.4289… #> $ Hibbs        <dbl> 44.81212, 56.51094, 48.95051, 61.36488, 49.25904, 59.2638… #> $ Abramowitz   <dbl> 44.29725, 59.00480, 49.42700, 60.85638, 50.09237, 59.5482… #> $ Actual       <dbl> 44.59477, 57.75380, 49.91609, 61.34263, 49.59511, 61.7880… x_data <- presidentialForecast[, c(1:6)] y_data <- presidentialForecast[, 7]  # 15 choose 3 for train/test split; get all unique combinations all_splits <- combn(1:15, 3, simplify = FALSE)  output <- list(NULL) for (i in seq_along(all_splits)) {   #cat(paste0(i, \".\"))   #if (i %% 10 == 0) cat(\"\\n\")      # Split 12/3 for calibration/test   test_idx  <- all_splits[[i]]   train_idx <- setdiff(1:15, all_splits[[i]])      # Calibrate EBMA   ebma_fit <- ebma(y = y_data[train_idx], x = x_data[train_idx, ],                    model_type = \"normal\",                     useModelParams = FALSE, tol = 0.0001, const = 0,                    method = \"EM\")      # Save calibration/test RMSE/MAE for each model   df  <- summary(ebma_fit, period=\"calibration\", showCoefs=FALSE)@summaryData   out <- data.frame(Period = \"calib\", Model = rownames(df), df[, c(\"rmse\", \"mae\")])   df  <- summary(ebma_fit, period=\"test\", showCoefs=FALSE)@summaryData   out <- rbind(out, data.frame(Period = \"test\", Model = rownames(df), df[, c(\"rmse\", \"mae\")]))      # Just average   simple_avg <- rowMeans(x_data)   fit <- data.frame(Period = c(\"calib\", \"test\"),                     Model = \"Simple avg\",                      rmse = c(                       sqrt(mean((simple_avg[train_idx] - y_data[train_idx])^2)),                       sqrt(mean((simple_avg[test_idx]  - y_data[test_idx])^2))                     ),                     mae = c(                       mean(abs(simple_avg[train_idx] - y_data[train_idx])),                       mean(abs(simple_avg[test_idx]  - y_data[test_idx]))                     ))      out <- rbind(out, fit)   out$index <- i      output[i] <- list(out) } #> Model weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithmModel weights estimated using EM algorithm output <- do.call(rbind, output) # Average RMSE/MAE fit by model output %>%   tidyr::gather(stat, value, rmse:mae) %>%   dplyr::group_by(Model, Period, stat) %>%    dplyr::summarize(mean = mean(value)) %>%    dplyr::ungroup() %>%   dplyr::mutate(     Period = forcats::fct_recode(Period, Calib = \"calib\", Test = \"test\"),     stat = toupper(stat)   ) %>%   tidyr::unite(stat, Period, stat) %>%   tidyr::spread(stat, mean) %>%   dplyr::arrange(Test_RMSE) %>%   dplyr::select(Model, ends_with(\"MAE\"), ends_with(\"RMSE\")) %>%   knitr::kable(digits = 2) #> `summarise()` has grouped output by 'Model', 'Period'. You can override using #> the `.groups` argument."},{"path":"/articles/cross-validation.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"EBMA cross-validation","text":"Montgomery, Jacob M., Florian M. Hollenbach, Michael D. Ward. 2015. “Calibrating Ensemble Forecasting Models Sparse Data Social Sciences.” International Journal Forecasting 31 (3): 930–42.","code":""},{"path":"/articles/ebma.html","id":"demonstrations-with-ebmaforecast-demo-data","dir":"Articles","previous_headings":"","what":"Demonstrations with EBMAforecast demo data","title":"EBMAhelper","text":"two included demo datasets, fit (calibrate) ensemble model predict set holdout test data afterwards.","code":"suppressPackageStartupMessages({   library(\"EBMAforecast\")   library(\"EBMAhelper\")   library(\"dplyr\") })"},{"path":"/articles/ebma.html","id":"normal-model-presidential-forecasts","dir":"Articles","previous_headings":"Demonstrations with EBMAforecast demo data","what":"Normal model: presidential forecasts","title":"EBMAhelper","text":"data consists 6 different sets forecasts 15 US presidential elections, well teh observed (actual) outcome. Next split input forecasts observed outcome, hold last 3 presidential elections back --sample test. Fitting model EBMAforecast, adapted package demo: test predictions calculated part calibrateEnsemble. wanted predict different set data, can use EBMApredict (see ?EBMApredict): predictions come S4 object class “FDatFitNormal”; actual predictions EBMA array slot “predTest”: Now equivalent sequence steps EBMAhelper. class different, just shallow cover; print summary still work . default ebma() take “x” column names model names. Get EBMA predictions test period, make sure match: “newdata” left default NULL value, return -sample predictions calibration period.","code":"data(presidentialForecast) head(presidentialForecast) %>%   knitr::kable(digits = 3) input_forecasts <- presidentialForecast[, c(1:6)] outcome <- presidentialForecast[, 7] train_idx <- 1:12 test_idx  <- 13:15 model_names <- c(\"Campbell\", \"Lewis-Beck\",\"EWT2C2\",\"Fair\",\"Hibbs\",\"Abramowitz\") this.ForecastData <- makeForecastData(   .predCalibration    = input_forecasts[train_idx, ],   .outcomeCalibration = outcome[train_idx],   .predTest    = input_forecasts[test_idx, ],    .outcomeTest = outcome[test_idx],    .modelNames = model_names)  ebma_fit <- calibrateEnsemble(this.ForecastData, model=\"normal\") #> Model weights estimated using EM algorithmWARNING: Problematic Cook's Distances (> 0.5) for Model 3  #> WARNING: Problematic Cook's Distances (> 0.5) for Model 4 ebma_fit #> * Prediction Calibration =  #>    EBMA Campbell Lewis-Beck EWT2C2 Fair Hibbs Abramowitz #> 1    46       47         45     46   45    45         44 #> 2    56       54         57     57   56    57         59 #> 3    51       51         48     50   51    49         49 #> 4    62       61         63     63   61    61         61 #> 5    50       48         49     52   50    49         50 #> 6    59       61         60     55   58    59         60 #> 7    48       48         53     47   50    50         49 #> 8    44       44         45     44   46    44         44 #> 9    60       59         57     57   62    60         58 #> 10   52       53         52     52   51    54         52 #> * Prediction Test =  #>   EBMA Campbell Lewis-Beck EWT2C2 Fair Hibbs Abramowitz #> 1   52       53         51     51   49    55         53 #> 2   54       52         51     55   54    53         53 #> 3   48       53         44     46   44    45         44 #> * Outcome Calibration =  #>        1        2        3        4        5        6        7        8  #> 44.59477 57.75380 49.91609 61.34263 49.59511 61.78800 48.94786 44.69676  #>        9       10  #> 59.16958 53.90129  #>  1  2  3  4  5  6  7  8  9 10  #> 45 58 50 61 50 62 49 45 59 54  #> * Outcome Test =  #>  1  2  3  #> 50 51 46  #> * Model Names =  #>  [1] \"Campbell\"   \"Lewis-Beck\" \"EWT2C2\"     \"Fair\"       \"Hibbs\"      #> [6] \"Abramowitz\" summary(ebma_fit, period = \"test\") #>                 W Constant Predictor rmse  mae #> EBMA                                 1.91 1.88 #> Campbell   0.4007  -0.0274     1.004 3.98 3.17 #> Lewis-Beck 0.0000   0.2174     0.997 1.67 1.34 #> EWT2C2     0.2558  -1.0028     1.027 2.24 1.66 #> Fair       0.2761  -2.8453     1.051 2.21 2.07 #> Hibbs      0.0674  -1.2971     1.035 2.92 2.49 #> Abramowitz 0.0000  -0.8894     1.022 2.53 2.46 preds <- EBMApredict(ebma_fit, as.matrix(input_forecasts[test_idx, ]),                       Outcome = outcome[test_idx]) class(preds) #> [1] \"FDatFitNormal\" #> attr(,\"package\") #> [1] \"EBMAforecast\" preds #> * Prediction Calibration =  #> [1] \"Nothing Here\" #> * Prediction Test =  #> , , 1 #>  #>      EBMA Campbell Lewis-Beck EWT2C2 Fair Hibbs Abramowitz #> [1,]   52       53         51     51   49    55         53 #> [2,]   54       52         51     55   54    53         53 #> [3,]   48       53         44     46   44    45         44 #>  #> * Outcome Calibration =  #> [1] \"Nothing Here\" #> * Outcome Test =  #> [1] 50 51 46 #> * Model Names =  #>  [1] \"Campbell\"   \"Lewis-Beck\" \"EWT2C2\"     \"Fair\"       \"Hibbs\"      #> [6] \"Abramowitz\" class(preds@predTest) #> [1] \"array\" # get the EBMA predictions preds@predTest[, \"EBMA\", 1] #> [1] 51.76052 53.54431 48.16715 ebma_fit_helper <- ebma(y = outcome[train_idx], x = input_forecasts[train_idx, ],                         model_type = \"normal\") #> Model weights estimated using EM algorithmWARNING: Problematic Cook's Distances (> 0.5) for Model 3  #> WARNING: Problematic Cook's Distances (> 0.5) for Model 4 class(ebma_fit_helper) #> [1] \"ebma\" summary(ebma_fit_helper) #>                 W Constant Predictor rmse  mae #> EBMA                                 1.47 1.18 #> Campbell   0.4007  -0.0274     1.004 1.60 1.23 #> Lewis-Beck 0.0000   0.2174     0.997 1.71 1.43 #> EWT2C2     0.2558  -1.0028     1.027 2.82 2.14 #> Fair       0.2761  -2.8453     1.051 2.21 1.76 #> Hibbs      0.0674  -1.2971     1.035 1.52 1.10 #> Abramowitz 0.0000  -0.8894     1.022 1.27 1.05 preds_helper <- predict(ebma_fit_helper, newdata = input_forecasts[test_idx, ]) cbind(   EBMAforecast = preds@predTest[, \"EBMA\", 1],   EBMAhelper = preds_helper ) #>      EBMAforecast EBMAhelper #> [1,]     51.76052   51.76052 #> [2,]     53.54431   53.54431 #> [3,]     48.16715   48.16715 cbind(   EBMAforecast = ebma_fit@predCalibration[, \"EBMA\", 1],   EBMAhelper = predict(ebma_fit_helper) ) #>    EBMAforecast EBMAhelper #> 1      45.96904   45.96904 #> 2      55.77587   55.77587 #> 3      50.71519   50.71519 #> 4      62.17513   62.17513 #> 5      49.97267   49.97267 #> 6      59.02741   59.02741 #> 7      48.34163   48.34163 #> 8      44.40672   44.40672 #> 9      59.62905   59.62905 #> 10     52.48123   52.48123 #> 11     49.39148   49.39148 #> 12     55.10163   55.10163"},{"path":"/articles/ebma.html","id":"logit-model-insurgency-forecasts","dir":"Articles","previous_headings":"Demonstrations with EBMAforecast demo data","what":"Logit model: insurgency forecasts","title":"EBMAhelper","text":"data consist 3 streams forecasts binary yes/insurgency indicator. 696 rows total. Keep last 20% rows holdout test sample; split data accordingly. errors right now: Now EBMAhelper: Skip next part predict works logit.","code":"data(calibrationSample) calibrationSample <- as.data.frame(calibrationSample) head(calibrationSample) %>%   knitr::kable(digits = 4) train_idx <- 1:(ceiling(nrow(calibrationSample)*.8)) test_idx  <- max(train_idx):nrow(calibrationSample) y_col <- 4 x_col <- 1:3 train_data <- calibrationSample[train_idx, ] test_data  <- calibrationSample[test_idx, ] model_names <- c(\"LMER\", \"SAE\", \"GLM\") this.ForecastData <- makeForecastData(   .predCalibration    = train_data[, x_col],   .outcomeCalibration = train_data[, y_col],   .predTest    = test_data[, x_col],   .outcomeTest = test_data[, y_col],   .modelNames = model_names) #> Warning: Your calibration data are very unbalanced. Only 9.16 percent of your #> observations are 1s. Be careful about convergence as well as interpretation of #> the results of this model.  ebma_fit <- calibrateEnsemble(this.ForecastData, model=\"logit\") #> Model weights estimated using EM algorithm #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred summary(ebma_fit) #>           W Constant Predictor  brier   auc perCorrect    pre #> EBMA                           0.0225 0.989      0.973  0.706 #> LMER 0.9564    -3.90     0.895 0.0941 0.988      0.849 -0.647 #> SAE  0.0436    -1.27     0.675 0.0750 0.944      0.887 -0.235 #> GLM  0.0000    -1.04     0.592 0.0829 0.680      0.908  0.000 preds <- EBMApredict(ebma_fit, as.matrix(test_data[, x_col]),                       Outcome = test_data[, y_col]) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred preds <- preds@predTest[, \"EBMA\", 1] ebma_fit_helper <- ebma(y = train_data[, y_col],                         x = train_data[, x_col],                         model_type = \"logit\") #> Warning: Your calibration data are very unbalanced. Only 9.16 percent of your #> observations are 1s. Be careful about convergence as well as interpretation of #> the results of this model. #> Model weights estimated using EM algorithm #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred summary(ebma_fit_helper) #>           W Constant Predictor  brier   auc perCorrect    pre #> EBMA                           0.0225 0.989      0.973  0.706 #> LMER 0.9564    -3.90     0.895 0.0941 0.988      0.849 -0.647 #> SAE  0.0436    -1.27     0.675 0.0750 0.944      0.887 -0.235 #> GLM  0.0000    -1.04     0.592 0.0829 0.680      0.908  0.000 preds_helper <- predict(ebma_fit_helper) cbind(   EBMAforecast = preds,   EBMAhelper = preds_helper ) %>%   head() %>%   knitr::kable(digits = 3)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andreas Beger. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beger (2022). EBMAhelper: Regular S3 model fitting function methods EBMAforecast. R package version 0.1.0.","code":"@Manual{,   title = {EBMAhelper: Regular S3 model fitting function and methods for EBMAforecast},   author = {Andreas Beger},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"ebmahelper","dir":"","previous_headings":"","what":"Regular S3 model fitting function and methods for\n    EBMAforecast","title":"Regular S3 model fitting function and methods for\n    EBMAforecast","text":"EBMAhelper wrapper around EBMAforecast (CRAN, GitHub) provides convenience functions akin R’s conventional model-related functions: ebma() create fit EBMA ensemble model; wraps EBMAforecast::makeForecastData EBMAforecast::calibrateEnsemble predict method class “ebma” object returned ebma() standalone predict() (TODO) method aggregate new forecasts.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Regular S3 model fitting function and methods for\n    EBMAforecast","text":"","code":"library(\"devtools\")  install_github(\"andybega/EBMAhelper\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Regular S3 model fitting function and methods for\n    EBMAforecast","text":"EBMA ensemble can fitted like : EBMAforecast slightly verbose follow R’s model fitting conventions. following code adapted package demo:","code":"suppressMessages({   library(\"EBMAforecast\")   library(\"EBMAhelper\") })   data(\"presidentialForecast\")  head(presidentialForecast) #>      Campbell Lewis-Beck   EWT2C2     Fair    Hibbs Abramowitz   Actual #> 1952 46.83648   45.18571 45.70344 45.24491 44.81212   44.29725 44.59477 #> 1956 54.04117   56.77496 56.54709 56.41898 56.51094   59.00480 57.75380 #> 1960 51.15267   48.44678 49.61112 51.08189 48.95051   49.42700 49.91609 #> 1964 61.12062   63.17691 63.48235 61.20933 61.36488   60.85638 61.34263 #> 1968 48.45415   48.65492 51.81968 50.19200 49.25904   50.09237 49.59511 #> 1972 61.17357   59.58035 55.04779 58.42894 59.26387   59.54824 61.78800 str(presidentialForecast) #> 'data.frame':    15 obs. of  7 variables: #>  $ Campbell  : num  46.8 54 51.2 61.1 48.5 ... #>  $ Lewis-Beck: num  45.2 56.8 48.4 63.2 48.7 ... #>  $ EWT2C2    : num  45.7 56.5 49.6 63.5 51.8 ... #>  $ Fair      : num  45.2 56.4 51.1 61.2 50.2 ... #>  $ Hibbs     : num  44.8 56.5 49 61.4 49.3 ... #>  $ Abramowitz: num  44.3 59 49.4 60.9 50.1 ... #>  $ Actual    : num  44.6 57.8 49.9 61.3 49.6 ...  fitted_ensemble <- ebma(y = presidentialForecast[ ,7],                         x = presidentialForecast[ ,c(1:6)],                         model_type = \"normal\") summary(fitted_ensemble) #>                 W Constant Predictor rmse  mae #> EBMA                                 1.33 1.03 #> Campbell   0.2685   -0.515     1.001 2.28 1.62 #> Lewis-Beck 0.0367    2.552     0.954 1.70 1.42 #> EWT2C2     0.2325    0.124     0.998 2.71 2.05 #> Fair       0.0000    1.106     0.977 2.21 1.82 #> Hibbs      0.4624    1.253     0.978 1.89 1.38 #> Abramowitz 0.0000    1.780     0.966 1.60 1.34 data(\"presidentialForecast\")  full.forecasts <- presidentialForecast[, c(1:6)] full.observed <- presidentialForecast[, 7]  this.ForecastData <- makeForecastData(   .predCalibration=full.forecasts[1:12,],   .outcomeCalibration=full.observed[1:12],   .predTest=full.forecasts[13:15,],    .outcomeTest=full.observed[13:15],    .modelNames=c(\"Campbell\", \"Lewis-Beck\",\"EWT2C2\",\"Fair\",\"Hibbs\",\"Abramowitz\")) thisEnsemble <- calibrateEnsemble(this.ForecastData, model=\"normal\",                                    useModelParams=FALSE, tol = 0.000000001,                                   const = 0) summary(thisEnsemble) #>                W Constant Predictor  rmse   mae #> EBMA                                0.944 0.745 #> Campbell   0.314        0         1 1.597 1.228 #> Lewis-Beck 0.000        0         1 1.705 1.434 #> EWT2C2     0.145        0         1 2.816 2.142 #> Fair       0.000        0         1 2.207 1.755 #> Hibbs      0.321        0         1 1.523 1.103 #> Abramowitz 0.221        0         1 1.266 1.055"},{"path":"/reference/ebma.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an EBMA ensemble — ebma","title":"Create an EBMA ensemble — ebma","text":"Wrapper around EBMAforecast::makeForecastData() EBMAforecast::calibrateEnsemble(). mimics R's conventional model syntax.","code":""},{"path":"/reference/ebma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an EBMA ensemble — ebma","text":"","code":"ebma(y, x, model_type, y_test = NULL, x_test = NULL, model_names = NULL, ...)"},{"path":"/reference/ebma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an EBMA ensemble — ebma","text":"y Outcome values training data (calibration). x Input forecasts training data (calibration). model_type Model use, either \"normal\" \"logit\". y_test Test period outcomes. x_test Test period input forecasts. model_names Vector model names; NULL, column names x used. ... Additional arguments EBMAforecast::calibrateEnsemble()","code":""},{"path":"/reference/predict.ebma.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for EBMA — predict.ebma","title":"Predict method for EBMA — predict.ebma","text":"Predict method EBMA","code":""},{"path":"/reference/predict.ebma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for EBMA — predict.ebma","text":"","code":"# S3 method for ebma predict(object, newdata = NULL, ...)"},{"path":"/reference/predict.ebma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for EBMA — predict.ebma","text":"object object class \"ebma\" newdata data frame containing inputs use prediction; otherwise predictions validation period (-sample) ... used","code":""},{"path":"/reference/predict_FDatFitLogit.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for broken predictor — predict_FDatFitLogit","title":"Replacement for broken predictor — predict_FDatFitLogit","text":"Replacement broken predictor","code":""},{"path":"/reference/predict_FDatFitLogit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for broken predictor — predict_FDatFitLogit","text":"","code":"predict_FDatFitLogit(object, newdata, ...)"},{"path":"/reference/predict_FDatFitLogit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for broken predictor — predict_FDatFitLogit","text":"object class \"ebma\" newdata optional new data ... used","code":""}]
